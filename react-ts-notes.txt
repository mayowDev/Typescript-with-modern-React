==========================Typrescript with modern React [hooks,context,suspense] ===================

*:*: course outline

-What is typescript 
-Tools and plugins  
-Adding Typescript with create-react-app
-React Typescript project from scratch with babel and webpacck
-project 1 TodoList with Typescript
-project 2 Favourite Rick and Morty picker(complex project)

*:*: Refrence to dive in  typescript

1: https://www.carlrippon.com/strongly-typed-react-redux-code-with-typescript
2: https://redux.js.org/recipes/usage-with-typescript

==> 3 min : plugins and tools for vscode as front end dev

-night owl (theme)
-atom keymap(atom shortcuts in vscode)
-bookmarks by alessandro
-bracket pair colorize
-es7 react /redux graphql snippets(rfc,clg,cmb)
-import cost
-prettier code formatter
-fira cod(font like firefox)


===> Atom key map shortcuts

-shift +ctrl+p (get acces command plat)
-cttrl+shift +T(open in built terminal)
-ctrl +option +B (format pretier)


==> Why Typescript

-TypeScript will likely provide a net benefit in larger apps or codebases need to be maintained over time by many people, 
but it may feel like too much overhead in smaller projects. 



==> What is Typescript

-Open source language developed by microsoft
-superset of javscript( like what C++ is to C )
-Brings static Typeing to javascript

==> 11 mins: Static Typing vs dynamic/automatic Javascript Typing

-in cosole of chrome [ let a= 2; typeOf a will be number, a='two'; typeOf a will be string  .
-That's what dynamic/automatic typing is, when language assigns variables without you telling it

==>INSTALLATIONS

-react
-npm install --save typescript @types/react-dom @types/react @types/node
-npm init -y



===================================installing typescript with webpack==============================
-npm init
-mkdir src
-touch index.tsx
-cd..
-touch index.html .babelrc webpack.config.js

-npm i @bable/core @babel/preset/env @babel/preset/react @babel/preset/typescript


--------------1:13 min stopped -----------------------

-in tsconfig.json file add "allowSyntheticDefaultImports": true, in combileoperations object
"compilerOptions": {
        "allowSyntheticDefaultImports": true,
        "lib": [
            "dom",
            "es2015"
        ],
        "jsx": "react"
    }


=====1hr 

===============================refrence from Weibenfalk typescript video=====================================

import React, { useState, CSSProperties, MouseEvent } from "react";
import { render } from "react-dom";

import "./styles.css";

type Props = {
  text: string;
};

interface ButtonProps {
  style: CSSProperties;
  text: string;
  callback: (event: MouseEvent<HTMLButtonElement>) => void;
}

//interface Props {
//  text: string
// }

// Declare function with React.FC (React.FunctionComponent)
const Banana: React.FC<Props> = ({ text, children }) => (
  <div>
    {text}, {children}
  </div>
);

const Strawberry: React.FC<Props> = ({ text }) => <div>{text}</div>;

const Apple = ({ text }: Props) => <div>{text}</div>;

const Button: React.FC<ButtonProps> = ({ text, callback }) => (
  <button name="increaseButton" onClick={callback}>
    {text}
  </button>
);

function App() {
  const [count, setCount] = useState(0);

  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {
    console.log(event.currentTarget);
    setCount(prev => prev + 1);
  };

  return (
    <div className="App">
      <h1>Really quick crash course</h1>
      <h2>in Typescript with React</h2>
      <Banana text="üçåBanana">More Bananasüçåüçåüçå</Banana>
      <Strawberry text="üçìStrawberry" />
      <Apple text="üçèApple" />
      <Button
        style={{ background: "red", margin: "200px 0" }}
        callback={handleClick}
        text="Click me!"
      />
      <p>{count}</p>
    </div>
  );
}

const rootElement = document.getElementById("root");
render(<App />, rootElement);
